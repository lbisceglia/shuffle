// Code generated by MockGen. DO NOT EDIT.
// Source: randomizer.go

// Package cards is a generated GoMock package.
package cards

import (
	reflect "reflect"
	cards "shuffle/cards"

	gomock "github.com/golang/mock/gomock"
)

// MockRandomizer is a mock of Randomizer interface.
type MockRandomizer struct {
	ctrl     *gomock.Controller
	recorder *MockRandomizerMockRecorder
}

// MockRandomizerMockRecorder is the mock recorder for MockRandomizer.
type MockRandomizerMockRecorder struct {
	mock *MockRandomizer
}

// NewMockRandomizer creates a new mock instance.
func NewMockRandomizer(ctrl *gomock.Controller) *MockRandomizer {
	mock := &MockRandomizer{ctrl: ctrl}
	mock.recorder = &MockRandomizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRandomizer) EXPECT() *MockRandomizerMockRecorder {
	return m.recorder
}

// Randomize mocks base method.
func (m *MockRandomizer) Randomize() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Randomize")
}

// Randomize indicates an expected call of Randomize.
func (mr *MockRandomizerMockRecorder) Randomize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Randomize", reflect.TypeOf((*MockRandomizer)(nil).Randomize))
}

// Seed mocks base method.
func (m *MockRandomizer) Seed(seed int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Seed", seed)
}

// Seed indicates an expected call of Seed.
func (mr *MockRandomizerMockRecorder) Seed(seed interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Seed", reflect.TypeOf((*MockRandomizer)(nil).Seed), seed)
}

// Shuffle mocks base method.
func (m *MockRandomizer) Shuffle(s cards.Shoe) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shuffle", s)
}

// Shuffle indicates an expected call of Shuffle.
func (mr *MockRandomizerMockRecorder) Shuffle(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shuffle", reflect.TypeOf((*MockRandomizer)(nil).Shuffle), s)
}
